'''   1) Mandelbrot   '''

'''
import turtle
import math

def mandelbrot(z , c , n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# screen size (in pixels)
screenx, screeny = 800, 600

# complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-1.0, 2.0)

# discretization step
step = 2

# turtle config
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("red")
screen.title("Mandelbrot Fractal (discretization step = %d)" % (int(step)))
mTurtle = turtle.Turtle()
mTurtle.penup()
mTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny

# plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m =  mandelbrot(0, x + 1j * y)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            mTurtle.color(color)
            mTurtle.dot(2.4, color)
            mTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()

#******************************* or *********************************************


import turtle
import sys

MAX_ITER = 100
def mand(c):
	z = 0
	n = 0
	while abs(z) <= 2 and n < MAX_ITER:
		z = z*z + c
		n = n + 1
	return n

# Plot window
RE_START = -2
RE_END = 1
IM_START = -1
IM_END = 1

screen = turtle.Screen()
(WIDTH,HEIGHT) = screen.screensize()

turtle.colormode(255)
turtle.tracer(0, 0)
turtle.speed("fastest") # fastest

for x in range(0,WIDTH):
	for y in range(0,HEIGHT):
		c = complex(RE_START + (x / WIDTH) * (RE_END - RE_START),
		IM_START + (y / HEIGHT) * (IM_END - IM_START))
		# Compute the number of iterations
		m = mand(c)
		# The color depends on the number of iterations
		color = 255 - int(m * 255 / MAX_ITER)
		# Plot the point
		t = turtle.Turtle()
		t.penup()
		t.setpos(x,y)
		t.pencolor((color,color,color))
		t.dot()
	if x%50==0:
		print("x is ",x, "needs to be 400 keep waiting")

turtle.update()

turtle.done()
'''

#---------------------------------------------------------

''' 2) julia '''

'''

from PIL import Image

# driver function
if __name__ == "__main__":

    # setting the width, height and zoom
    # of the image to be created
    w, h, zoom = 800,800,1

    # creating the new image in RGB mode
    bitmap = Image.new("RGB", (w, h), "white")

    # Allocating the storage for the image and
    # loading the pixel data.
    pix = bitmap.load()

    # setting up the variables according to
    # the equation to  create the fractal
    cX, cY = -0.7, 0.27015
    moveX, moveY = 0.0, 0.0
    maxIter = 255

    for x in range(w):
        for y in range(h):
            zx = 1.5*(x - w/2)/(0.5*zoom*w) + moveX
            zy = 1.0*(y - h/2)/(0.5*zoom*h) + moveY
            i = maxIter
            while zx*zx + zy*zy < 4 and i > 1:
                tmp = zx*zx - zy*zy + cX
                zy,zx = 2.0*zx*zy + cY, tmp
                i -= 1

            # convert byte to RGB (3 bytes), kinda
            # magic to get nice colors
            pix[x,y] = (i << 21) + (i << 10) + i*8

    # to display the created fractal
    bitmap.show()
'''

#******************************************************************

'''
import turtle
import math

# Define global variable max_iter
max_iter = 20

# Julia set function
def julia(z, c, max_iter=max_iter):
    for i in range(max_iter):
        if abs(z) > 2:
            return i
        z = z ** 2 + c
    return max_iter

# Screen size (in pixels)
screenx, screeny = 200, 200

# Complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-1.0, 2.0)

# Discretization step
step = 1

# Turtle config
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("black")
screen.title(f"Julia Set (c = complex(-0.4, 0.6))")

# Choose a complex constant c for the Julia set
c = complex(-0.4, 0.6)

# Create a turtle for drawing
jTurtle = turtle.Turtle()
jTurtle.penup()
jTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny

# Plot
for px in range(-int(screenx/2), int(screenx/2), step):
    for py in range(-int(screeny/2), int(screeny/2), step):
        # Calculate complex plane coordinates
        x, y = px * pixelToX, py * pixelToY
        
        # Calculate the number of iterations until divergence
        m = julia(complex(x, y), c)
        
        # Choose a color based on the number of iterations
        color_intensity = m / max_iter
        color = (color_intensity, 0.5, 1 - color_intensity)
        
        # Set color and draw dot
        jTurtle.color(color)
        jTurtle.dot(2, color)
        jTurtle.goto(px, py)
        
    turtle.update()

turtle.mainloop()
'''

#-----------------------------------------------------------------------

''' 3)  c curve '''

'''
import turtle



def c_curve(t,length,levels):
    if levels == 0:
        t.forward(length)
        return
    else:
        nlength = length/2

        t.right(45)
        c_curve(t, nlength, levels-1)

        t.left(90)
        c_curve(t, nlength, levels-1)

        t.right(45)



turtle.TurtleScreen._RUNNING=True
t = turtle.Turtle()
scrn = turtle.Screen()
t.hideturtle()
c_curve(t, 1000, 7)
scrn.exitonclick()
'''

#-------------------------------------------------------------------
'''
from turtle import *
color('red', 'blue')
#begin_fill()
rule=['r','f','l','l','f','r']
prev=['r','f','l','l','f','r']
ans=[]
for iter in range(6):
    ans = []
    for i in prev:
        if(i=='f'):
            ans+=rule
        else:
            ans.append(i)
    prev = ans

print(ans)

for i in range(0,len(ans)):
    if(ans[i] == 'r'):
        right(45)
    elif(ans[i] == 'f'):
        forward(20)
    elif(ans[i] == 'l'):
        left(45)


#end_fill()
done()

"""or this works well also

import turtle

def c_curve(depth: int):
    
    start = "+f--f+"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "+f--f+"
            else:
                string += start[j]
        start = string
        
    return start

def main():
    
    string = c_curve(depth=4)
    rules = {
            'f': [t.forward, 10],
            '+': [t.right, 45],
            '-': [t.left, 45],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# # C Curve function
# def c_curve(n):
#     if n == 0:
#         return ['F']
#     else:
#         prev = c_curve(n - 1)
#         return prev + ['L'] + [x if x == 'F' else 'R' for x in reversed(prev)]

# # Configure turtle
# screen = turtle.Screen()
# screen.title("C Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4 # Adjust the order as needed
# size = 6

# # Generate C Curve
# curve = c_curve(order)
# for move in curve:
#     if move == 'F':
#         t.forward(size)
#     elif move == 'L':
#         t.left(90)
#     elif move == 'R':
#         t.right(90)

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()

'''

''' 4) dragon curve  '''

'''
import turtle

def dragon_curve(turtle, order, length, direction):
    if order == 0:
        turtle.forward(length)
    else:
        dragon_curve(turtle, order - 1, length, 1)
        turtle.right(90 * direction)
        dragon_curve(turtle, order - 1, length, -1)

turtle.speed(0)
dragon_curve(turtle, 12, 5, 1)
turtle.done()

"""or this works well also

import turtle

def dragon_curve(depth: int):

    start = "f-h"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "f-h"
            elif start[j] == 'h':
                string += "f+h"
            else:
                string += start[j]
            
        start = string
        
    return start


def main():

    t.left(90)
    string = dragon_curve(depth=10)

    rules = {
            'f': [t.forward, 10],
            'h': [t.forward, 10],
            '+': [t.right, 90],
            '-': [t.left, 90],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# def dragon_curve(order, length, angle, turn):
#     if order == 0:
#         turtle.forward(length)
#         return
#     else:
#         dragon_curve(order - 1, length, angle, "right")
#         turtle.left(angle if turn == "right" else -angle)
#         dragon_curve(order - 1, length, angle, "left")

# # Configure turtle
# screen = turtle.Screen()
# screen.title("Dragon Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4  # Adjust the order as needed
# length = 5
# angle = 90

# # Generate Dragon Curve
# dragon_curve(order, length, angle, "right")

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()

'''
# **************************************************************
''' 5) terrain '''
'''
import turtle
import random

# Set up the screen
screen = turtle.Screen()
screen.setup(width=800, height=600)
screen.bgcolor("skyblue")

# Set up the turtle
terrain_turtle = turtle.Turtle()
terrain_turtle.speed(0)  # Set the fastest drawing speed
terrain_turtle.penup()

# Function to draw terrain
def draw_terrain():
    terrain_turtle.goto(-400, -20)  # Starting point
    terrain_turtle.pendown()

    # Draw the terrain
    for _ in range(160):
        terrain_turtle.color("green")
        terrain_turtle.forward(5)  # Move forward
        terrain_turtle.setheading(random.choice([0, 45, -45]))  # Turn randomly
        terrain_turtle.forward(random.randint(1, 10))  # Move up or down randomly

# Call the function to draw terrain
draw_terrain()

# Hide the turtle
terrain_turtle.hideturtle()

# Keep the window open
screen.mainloop()
'''
# ------------------------------------------------------------------
'''
import turtle
import random
import math

# Define the size of the terrain (must be a power of 2 plus 1, e.g., 2^n + 1)
size = 65  # You can adjust this value (e.g., 33, 65, 129, etc.)
roughness = 1.0  # Roughness parameter, adjust to control terrain smoothness

# Initialize the heightmap
heightmap = [[0] * size for _ in range(size)]

# Diamond-Square algorithm for generating terrain
def diamond_square():
    global size, roughness
    # Initial corner values
    heightmap[0][0] = random.uniform(0, 1)
    heightmap[0][size - 1] = random.uniform(0, 1)
    heightmap[size - 1][0] = random.uniform(0, 1)
    heightmap[size - 1][size - 1] = random.uniform(0, 1)

    side_length = size - 1

    # Perform Diamond-Square iterations
    while side_length >= 2:
        half_length = side_length // 2

        # Diamond step
        for x in range(0, size - 1, side_length):
            for y in range(0, size - 1, side_length):
                diamond_step(x, y, side_length, random.uniform(-roughness, roughness))

        # Square step
        for x in range(0, size - 1, half_length):
            for y in range((x + half_length) % side_length, size - 1, side_length):
                square_step(x, y, half_length, random.uniform(-roughness, roughness))

        side_length //= 2
        roughness *= 0.5  # Reduce roughness

# Diamond step: Calculate the average of the corners and add a random offset
def diamond_step(x, y, length, offset):
    half_length = length // 2
    avg = (heightmap[x][y] +
           heightmap[x + length][y] +
           heightmap[x][y + length] +
           heightmap[x + length][y + length]) / 4.0
    heightmap[x + half_length][y + half_length] = avg + offset

# Square step: Calculate the average of the four surrounding values and add a random offset
def square_step(x, y, length, offset):
    half_length = length // 2
    avg = (heightmap[(x - half_length + size - 1) % (size - 1)][y] +
           heightmap[(x + half_length) % (size - 1)][y] +
           heightmap[x][(y - half_length + size - 1) % (size - 1)] +
           heightmap[x][(y + half_length) % (size - 1)]) / 4.0
    heightmap[x][y] = avg + offset

# Function to normalize the heightmap values and render them in Turtle graphics
def render_terrain():
    # Normalize the heightmap values to range [0, 1]
    min_height = min(min(row) for row in heightmap)
    max_height = max(max(row) for row in heightmap)
    height_range = max_height - min_height

    # Set up Turtle graphics
    turtle.tracer(0, 0)  # Disable automatic updates
    screen = turtle.Screen()
    screen.setup(800, 800)  # Set the screen size
    screen.title("Terrain Generation")
    screen.bgcolor("white")

    # Create a turtle for drawing
    terrain_turtle = turtle.Turtle()
    terrain_turtle.hideturtle()  # Hide the turtle shape
    terrain_turtle.penup()

    # Calculate the pixel size based on the screen and heightmap size
    pixel_size = 800 // size

    # Loop through each point in the heightmap
    for x in range(size):
        for y in range(size):
            # Normalize height to [0, 1] range
            height_normalized = (heightmap[x][y] - min_height) / height_range
            
            # Choose a color based on the height
            # Example: blue for low, green for mid, and brown for high
            if height_normalized < 0.4:
                color = (0, height_normalized, 1 - height_normalized)
            elif height_normalized < 0.7:
                color = (height_normalized, 1, 0)
            else:
                color = (height_normalized * 0.7 + 0.3, 0.7, 0.2)

            # Set the color and move to the position
            terrain_turtle.color(color)
            terrain_turtle.goto((x - size / 2) * pixel_size, (y - size / 2) * pixel_size)
            
            # Draw a filled square
            terrain_turtle.begin_fill()
            for _ in range(4):
                terrain_turtle.forward(pixel_size)
                terrain_turtle.left(90)
            terrain_turtle.end_fill()

    # Update the screen
    turtle.update()
    # Keep the window open
    turtle.mainloop()

# Run the Diamond-Square algorithm
diamond_square()

# Render the terrain
render_terrain()
'''
